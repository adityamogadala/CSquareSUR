import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;

import java.util.HashMap;
import java.util.TreeMap;
import java.util.Map;

import com.jmatio.io.*;
import com.jmatio.types.*;
public class GenerateEvaluationFiles {
	public static void main(String[] args) throws IOException {
		
		
		String TestCatList = "trainset_txt_img_cat.list"; 
		TreeMap<Integer,Integer> TestSemanticCat = new TreeMap<Integer,Integer>();
		InputStream file2 = new FileInputStream(TestCatList);
	    BufferedReader in2 = new BufferedReader(new InputStreamReader(file2, "UTF-8"));
	    String str2;
	    int count=1;
	    while ((str2 = in2.readLine()) != null) {
	        		String[] catfind = str2.trim().split("\\t");
	        		TestSemanticCat.put(count, Integer.parseInt(catfind[2]));
	        		count++;
	    } 
	    file2.close();
	   
	MatFileReader mfr = null;
        double[][] data =null;
        HashMap<String,MLArray> T;
        try {
        mfr = new MatFileReader(args[0]); // .MAT file Generated by Matlab Code
        } catch (IOException e) {
        e.printStackTrace();
        }      
        if (mfr != null) 
        {
        	T = (HashMap<String, MLArray>) mfr.getContent();
        if (T!=null)
        {
        	for(Map.Entry<String,MLArray> entry :T.entrySet()) 
        	{
        			data = ((MLDouble)mfr.getMLArray(entry.getKey())).getArray();
        			if (data!=null)
        			{
        				int[][] Invdata = new int[data[0].length][data.length]; 
        				for (int i=0;i<data.length;i++)
        				{
        					for (int j=0;j<data[i].length;j++)
        					{
        						Invdata[j][i]=TestSemanticCat.get((int)data[i][j]);
        					}
        				}
        				Writer writer1=null;
        				writer1 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("Results/"+entry.getKey()) ,"utf-8"));
        				for (int i=0;i<Invdata.length;i++)
        				{
        					for (int j=0;j<Invdata[i].length;j++)
        					{
        						writer1.write(Invdata[i][j]+" ");
        					}
        					writer1.write("\n");
        				}
        				writer1.close();
        			}
        	}
        }
	}
}
}
